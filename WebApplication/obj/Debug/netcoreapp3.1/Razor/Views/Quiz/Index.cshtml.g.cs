#pragma checksum "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e76f5c9a542588b5ee2ccce9fc21275280d464cf"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Quiz_Index), @"mvc.1.0.view", @"/Views/Quiz/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\_ViewImports.cshtml"
using WebApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\_ViewImports.cshtml"
using WebApplication.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e76f5c9a542588b5ee2ccce9fc21275280d464cf", @"/Views/Quiz/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fa0ef8da47a84ffb33e8bc853509aa4fa5703a26", @"/Views/_ViewImports.cshtml")]
    public class Views_Quiz_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<QuestionModel[]>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
  
    ViewData["Title"] = "Оценка риска развития сахарного диабета";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h1>");
#nullable restore
#line 6 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</h1>\r\n<p>Пройдите тест, чтобы узнать вероятность заболевания диабетом</p>\r\n\r\n<span id=\"currentQuestion\" style=\"display: none\">1</span>\r\n");
#nullable restore
#line 11 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
 using (Html.BeginForm())
{
    for (int i = 0; i < Model.Length; i++)
    {
        int number = i + 1;


#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"question-block\"");
            BeginWriteAttribute("id", " id=\"", 440, "\"", 460, 2);
            WriteAttributeValue("", 445, "blockId_", 445, 8, true);
#nullable restore
#line 17 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
WriteAttributeValue("", 453, number, 453, 7, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" data-key=\"");
#nullable restore
#line 17 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                                                              Write(Model[i].Key);

#line default
#line hidden
#nullable disable
            WriteLiteral("\" style=\"display:none\">\r\n\r\n");
            WriteLiteral("            <div>\r\n                <span class=\"label label-warning\">");
#nullable restore
#line 21 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                                             Write(number);

#line default
#line hidden
#nullable disable
            WriteLiteral(" / ");
#nullable restore
#line 21 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                                                       Write(Model.Length);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                <p>");
#nullable restore
#line 22 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
              Write(Model[i].Text);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n            </div>\r\n\r\n");
            WriteLiteral("            <div class=\"choices\">\r\n");
#nullable restore
#line 27 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                 if (Model[i].AnswerChoices.Count == 0)
                {

                    if (Model[i].Key == "BMI")
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <input type=\"number\" name=\"height\" placeholder=\"Введите рост (см)\" min=\"1\">\r\n                        <input type=\"number\" name=\"weight\" placeholder=\"Введите вес (кг)\" min=\"1\">\r\n");
#nullable restore
#line 34 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                    }
                    else
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <input type=\"number\" placeholder=\"Введите значение\" min=\"0\" max=\"30\">\r\n");
#nullable restore
#line 38 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                    }
                }

#line default
#line hidden
#nullable disable
#nullable restore
#line 40 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                 foreach (var answer in Model[i].AnswerChoices)
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <label class=\"radio-inline\">\r\n                        <input type=\"radio\"");
            BeginWriteAttribute("name", " name=\"", 1518, "\"", 1534, 2);
            WriteAttributeValue("", 1525, "choice_", 1525, 7, true);
#nullable restore
#line 43 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
WriteAttributeValue("", 1532, i, 1532, 2, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            BeginWriteAttribute("value", " value=", 1535, "", 1555, 1);
#nullable restore
#line 43 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
WriteAttributeValue("", 1542, answer.Value, 1542, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">\r\n                        ");
#nullable restore
#line 44 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                   Write(answer.Text);

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                    </label>\r\n");
#nullable restore
#line 46 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("            </div>\r\n\r\n        </div>\r\n");
#nullable restore
#line 50 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
    }


#line default
#line hidden
#nullable disable
            WriteLiteral("    <button type=\"button\" id=\"previousQuestionBtn\" class=\"btn btn-dark\">Назад</button>\r\n    <button type=\"button\" id=\"nextQuestionBtn\" class=\"btn btn-dark\">Дальше</button>\r\n");
            WriteLiteral("    <button type=\"submit\" class=\"btn\">Получить результат</button>\r\n");
#nullable restore
#line 56 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div id=\"resultPredict\"></div>\r\n\r\n\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>

        function switchQuestion() {
            //TODO: создать общую функцию для переключения вопросов назад или вперед
        }

        function validateInputsQuestion(numberQuestion) {
            let number = parseInt(numberQuestion);
            let inputsRadio = $('#blockId_' + number + "" :input[type='radio']"");
            let inputsNumber = $('#blockId_' + number + "" :input[type='number']"");

            if (inputsRadio.length > 0) {
                let isValid = false;
                for (var i = 0; i < inputsRadio.length; i++) {
                    if (inputsRadio[i].checked) {
                        isValid = true;
                        break;
                    }
                }
                return isValid;
            }
            else if (inputsNumber.length > 0) {
                let isValid = true;
                for (var i = 0; i < inputsNumber.length; i++) {
                    let input = parseInt(inputsNumber[i].value);

             ");
                WriteLiteral(@"       if (isNaN(input)) {
                        isValid = false;
                    }
                    else {
                        let min = parseInt(inputsNumber[i].min);
                        let max = parseInt(inputsNumber[i].max);

                        if (!isNaN(min) && input < min) {
                            isValid = false;
                        }
                        if (!isNaN(max) && input > max) {
                            isValid = false;
                        }
                    }
                }
                return isValid;
            }
        }

        // Расчет индекса массы тела (вес в кг, рост в см)
        function calculateBmi(weight, height) {
            let w = parseInt(weight);
            let h = parseInt(height);

            if (w > 0 && h > 0) {

                let bmi = w / ((h / 100) * (h / 100));
                return bmi;
            }
            else {
                return 0;
            }
        }

 ");
                WriteLiteral("       function getAnswers() {\r\n            let answers = new Array();\r\n\r\n            for (let i = 0; i < ");
#nullable restore
#line 127 "C:\Users\Artem\Desktop\diabetes-predictor\WebApplication\Views\Quiz\Index.cshtml"
                           Write(Model.Length);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"; i++) {
                let block = '#blockId_' + (i + 1);
                let key = $(block).data('key');

                let inputs = $(block + ' :input');

                let answer = new Object();
                for (let i = 0; i < inputs.length; i++) {
                    if (inputs[i].type === 'radio' && inputs[i].checked) {

                        answer.QuestionKey = key;
                        answer.AnswerValue = parseInt(inputs[i].value);
                        answers.push(answer);
                        break;
                    }
                    else if (inputs[i].type === 'number')
                    {
                        let value = parseInt(inputs[i].value);
                        if (key === 'BMI') {
                            let weight = $(""input[name='weight']"").val();
                            let height = $(""input[name='height']"").val();
                            value = calculateBmi(weight, height);
                        }

            ");
                WriteLiteral(@"            answer.QuestionKey = key;
                        answer.AnswerValue = value;
                        answers.push(answer);
                        break;
                    }
                }
            }

            return answers;
        }

    </script>

    <script>

        $(document).ready(function () {

            $('#blockId_1').css(""display"", ""block"");

            // Обработчик события нажатия кнопки перехода к следующему вопросу
            $('#nextQuestionBtn').on('click', function () {

                let numberQuestion = parseInt($('#currentQuestion').text());
                let isValid = validateInputsQuestion(numberQuestion);
                if (!isValid) {
                    alert(""Необходимо ответить на текущий вопрос, чтобы перейти к следующему."");
                    return;
                }

                let currentBlock = '#blockId_' + numberQuestion;
                $(currentBlock).css(""display"", ""none"");

                let ne");
                WriteLiteral(@"xtBlock = '#blockId_' + (numberQuestion + 1);
                $(nextBlock).css(""display"", ""block"");

                $('#currentQuestion').text(numberQuestion + 1);
            });

            // Обработчик события нажатия кнопки перехода к прошлому вопросу
            $('#previousQuestionBtn').on('click', function () {

                let numberQuestion = parseInt($('#currentQuestion').text());

                let currentBlock = '#blockId_' + numberQuestion;
                $(currentBlock).css(""display"", ""none"");

                let nextBlock = '#blockId_' + (numberQuestion - 1);
                $(nextBlock).css(""display"", ""block"");

                $('#currentQuestion').text(numberQuestion - 1);
            });

            // Отправка формы
            $('form').submit(function (e) {

                e.preventDefault();

                let answers = getAnswers();
                console.log(answers);
                let dataJson = JSON.stringify(answers);

                ");
                WriteLiteral(@"$.ajax({
                    type: 'POST',
                    url: '/Predict/GetPredict',
                    contentType: 'application/json',
                    data: dataJson,
                    success: function (data) {
                        $('#resultPredict').html(data);
                    },
                    error: function (data) {
                        alert(""Возникла непредвиденная ошибка. Попробуйте повторить действие позже."");
                        console.log(data);
                    }
                });

            });
        });

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<QuestionModel[]> Html { get; private set; }
    }
}
#pragma warning restore 1591
